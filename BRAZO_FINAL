#include <Servo.h>

Servo pinza;   // Crear objeto para la pinza
Servo muneca;  // Crear objeto para la muñeca
Servo codo;    // Crear objeto para el codo
Servo hombro;  // Crear objeto para el hombro
Servo extraServo; // Crear objeto para el nuevo servo en el pin 8

const int pinzaPin = 12;
const int munecaPin = 11;
const int codoPin = 10;
const int extraServoPin = 9; // Pin del nuevo servo
const int hombroPin = 8;

const int joy1XPin = A0;    // Eje X del primer joystick (para la pinza)
const int joy1YPin = A1;    // Eje Y del primer joystick (para la muñeca)

const int joy2XPin = A2;    // Eje X del segundo joystick (para el codo)
const int joy2YPin = A3;    // Eje Y del segundo joystick (para el hombro)

const int joy1ButtonPin = 4;  // Pin del botón del primer joystick
const int joy2ButtonPin = 5;  // Pin del botón del segundo joystick

int joy1XValue = 0;
int joy1YValue = 0;
int joy2XValue = 0;
int joy2YValue = 0;

bool grabando = false; // Variable para controlar el estado de grabación
bool reproduciendo = false; // Variable para controlar el estado de reproducción

// Estructura para almacenar los ángulos de los servos grabados
struct ServoAngles {
  int pinza;
  int muneca;
  int codo;
  int extraServo;
};

// Arreglo para almacenar los datos grabados
ServoAngles grabacion[100];  // Máximo 100 puntos de grabación
int grabacionIndex = 0;      // Índice para almacenar datos

void setup() {
  Serial.begin(9600);
  pinza.attach(pinzaPin);
  muneca.attach(munecaPin);
  codo.attach(codoPin);
  hombro.attach(hombroPin);
  extraServo.attach(extraServoPin); // Inicializar el nuevo servo

  // Configuración de los pines de los botones como entrada con pull-up interno
  pinMode(joy1ButtonPin, INPUT_PULLUP);  
  pinMode(joy2ButtonPin, INPUT_PULLUP);

  hombro.write(150);  // Posición inicial del hombro
  Serial.println("Esperando comandos...");
}

void loop() {
  // Comprobar si hay datos disponibles en el monitor serie
  if (Serial.available() > 0) {
    char command = Serial.read();  // Leer el carácter enviado

    // Comenzar a grabar si se recibe la letra 'g'
    if (command == 'g' && !reproduciendo) {
      grabando = true;
      grabacionIndex = 0;  // Reiniciar el índice de grabación
      Serial.println("Grabación iniciada.");
    }

    // Detener la grabación si se recibe la letra 'd'
    if (command == 'd' && !reproduciendo) {
      grabando = false;
      Serial.println("Grabación detenida.");
    }

    // Reproducir la grabación si se recibe la letra 'r'
    if (command == 'r' && !grabando) {
      if (grabacionIndex > 0) { // Verificar si hay datos grabados
        reproduciendo = true;
        Serial.println("Reproducción iniciada.");
      } else {
        Serial.println("No hay datos para reproducir.");
      }
    }
  }

  // Leer los valores de los joysticks
  joy1XValue = analogRead(joy1XPin); // Leer el valor del eje X del primer joystick
  joy1YValue = analogRead(joy1YPin); // Leer el valor del eje Y del primer joystick
  joy2XValue = analogRead(joy2XPin); // Leer el valor del eje X del segundo joystick
  joy2YValue = analogRead(joy2YPin); // Leer el valor del eje Y del segundo joystick

  // Mapeo de los valores del joystick a ángulos de servos
  int pinzaAngle = map(joy1XValue, 0, 1023, 180, 0);
  int munecaAngle = map(joy1YValue, 0, 1023, 0, 180);
  int codoAngle = map(joy2XValue, 0, 1023, 0, 180);  // Mover de 180 a 0 grados
  int extraServoAngle = map(joy2YValue, 0, 1023, 180, 0);  // Invertir para dirección adecuada

  // Control manual de los servos
  pinza.write(pinzaAngle);
  muneca.write(munecaAngle);
  codo.write(codoAngle);
  extraServo.write(extraServoAngle); // Control manual del nuevo servo

  // Si el botón del primer joystick se presiona, mover el hombro a 30 grados
  if (digitalRead(joy1ButtonPin) == LOW) {  // Button pressed (LOW due to INPUT_PULLUP)
    hombro.write(30);
    Serial.println("Hombro movido a 30 grados por el primer botón.");
  }

  // Si el botón del segundo joystick se presiona, mover el hombro a 150 grados
  if (digitalRead(joy2ButtonPin) == LOW) {  // Button pressed (LOW due to INPUT_PULLUP)
    hombro.write(150);
    Serial.println("Hombro movido a 150 grados por el segundo botón.");
  }

  // Si estamos grabando, almacenar los valores
  if (grabando && grabacionIndex < 100) {
    // Guardamos los ángulos actuales en el arreglo de grabación
    grabacion[grabacionIndex].pinza = pinzaAngle;
    grabacion[grabacionIndex].muneca = munecaAngle;
    grabacion[grabacionIndex].codo = codoAngle;
    grabacion[grabacionIndex].extraServo = extraServoAngle;

    grabacionIndex++; // Avanzamos al siguiente índice

    // Mostrar los valores de grabación en el monitor serie
    Serial.print("Grabando... ");
    Serial.print("Pinza: "); Serial.print(pinzaAngle);
    Serial.print(" Muñeca: "); Serial.print(munecaAngle);
    Serial.print(" Codo: "); Serial.print(codoAngle);
    Serial.print(" Extra Servo: "); Serial.println(extraServoAngle);
  }

  // Si se está reproduciendo, mover los servos a los ángulos grabados
  if (reproduciendo && grabacionIndex > 0) {
    for (int i = 0; i < grabacionIndex; i++) {
      pinza.write(grabacion[i].pinza);
      muneca.write(grabacion[i].muneca);
      codo.write(grabacion[i].codo);
      extraServo.write(grabacion[i].extraServo);

      // Mostrar en el monitor serie los valores de reproducción
      Serial.print("Reproduciendo... ");
      Serial.print("Pinza: "); Serial.print(grabacion[i].pinza);
      Serial.print(" Muñeca: "); Serial.print(grabacion[i].muneca);
      Serial.print(" Codo: "); Serial.print(grabacion[i].codo);
      Serial.print(" Extra Servo: "); Serial.println(grabacion[i].extraServo);

      delay(500);  // Retardo para hacer la reproducción más legible (ajustable)
    }

    // Al finalizar la reproducción, detenerla
    reproduciendo = false;
    Serial.println("Reproducción terminada.");
  }

  delay(15);  // Pausa pequeña para estabilidad
}
