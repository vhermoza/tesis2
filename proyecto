# Librerías
from tkinter import *
from PIL import Image, ImageTk  # Usamos PIL para soportar más formatos de imagen
import imutils  # Correcto uso de imutils
import cv2
import numpy as np
from ultralytics import YOLO
import math

# Mostrar Imagenes
def images(img, imgtxt):
    img = img
    imgtxt = imgtxt

    #Imagen detectada
    img = np.array(img,dtype='uint8')
    img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
    img = Image.fromarray(img)

    img_ = ImageTk.PhotoImage(image=img)
    lblimg.configure(image=img_)
    lblimg.image = img_

    #Imagentxt detectada
    imgtxt = np.array(imgtxt,dtype='uint8')
    imgtxt = cv2.cvtColor(imgtxt,cv2.COLOR_BGR2RGB)
    imgtxt = Image.fromarray(imgtxt)

    img_txt = ImageTk.PhotoImage(image=imgtxt)
    lblimgtxt.configure(image=img_txt)
    lblimgtxt.image=img_txt

# Scanning function , Captura video de la cámara y usa el modelo YOLO para detectar objetos en cada cuadro.
# Dibuja rectángulos alrededor de los objetos detectados con confianza mayor al 50% y
# actualiza la imagen en la interfaz gráfica (Tkinter).
def scanning():
    global lblimg, lblimgtxt
    # Interfaz
    lblimg = Label (pantalla)
    lblimg.place(x=75, y =260)
    lblimgtxt = Label (pantalla)
    lblimgtxt.place(x=995, y =318)

    global cap  # Declarar cap como global
    # Verificar si la cámara está abierta
    if cap is not None:
        ret, frame = cap.read()
        frame_show = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        if ret == True:
            results = model(frame, stream=True, verbose=False)
            for res in results:
                # Box
                boxes = res.boxes
                for box in boxes:
                    # Bounding Box
                    x1, y1, x2, y2 = box.xyxy[0]
                    x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)

                    # Corrección de posibles errores en las coordenadas de la caja
                    if x1 < 0: x1 = 0
                    if y1 < 0: y1 = 0
                    if x2 < 0: x2 = 0
                    if y2 < 0: y2 = 0

                    # Clase detectada
                    cls = int(box.cls[0])

                    # Confianza del modelo
                    conf = math.ceil(box.conf[0] * 100)  # Redondeo al número entero superior

                    if conf > 50:  # Si la confianza es mayor al 50%
                        # Metal
                        if cls == 0:
                            # Dibujar un rectángulo alrededor del objeto detectado
                            cv2.rectangle(frame_show, (x1, y1), (x2, y2), (255, 255, 0), 2)

                            # Texto para mostrar la clase y la confianza
                            text = f'{clsName[cls]} {conf}%'
                            sizetext = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX, 1, 2)
                            dim = sizetext[0]
                            baseline = sizetext[1]

                            # Dibujar un rectángulo negro detrás del texto para que sea visible
                            cv2.rectangle(frame_show, (x1, y1 - dim[1] - baseline), (x1 + dim[0], y1), (0, 0, 0), cv2.FILLED)
                            # Dibujar el texto de la clase y la confianza
                            cv2.putText(frame_show, text, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 2)

                            images(img_metal, img_metaltxt)

                        #Vidrio

                        if cls == 1:
                            # Dibujar un rectángulo alrededor del objeto detectado
                            cv2.rectangle(frame_show, (x1, y1), (x2, y2), (255, 255, 255), 2)

                            # Texto para mostrar la clase y la confianza
                            text = f'{clsName[cls]} {conf}%'
                            sizetext = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX, 1, 2)
                            dim = sizetext[0]
                            baseline = sizetext[1]

                            # Dibujar un rectángulo negro detrás del texto para que sea visible
                            cv2.rectangle(frame_show, (x1, y1 - dim[1] - baseline), (x1 + dim[0], y1), (0, 0, 0), cv2.FILLED)
                            # Dibujar el texto de la clase y la confianza
                            cv2.putText(frame_show, text, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)

                            images(img_glass, img_glasstxt)

                        # Plastico

                        if cls == 2:
                            # Dibujar un rectángulo alrededor del objeto detectado
                            cv2.rectangle(frame_show, (x1, y1), (x2, y2), (255, 255, 255), 2)

                            # Texto para mostrar la clase y la confianza
                            text = f'{clsName[cls]} {conf}%'
                            sizetext = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX, 1, 2)
                            dim = sizetext[0]
                            baseline = sizetext[1]

                            # Dibujar un rectángulo negro detrás del texto para que sea visible
                            cv2.rectangle(frame_show, (x1, y1 - dim[1] - baseline), (x1 + dim[0], y1), (0, 0, 0), cv2.FILLED)
                            # Dibujar el texto de la clase y la confianza
                            cv2.putText(frame_show, text, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)

                            images(img_plastic, img_plastictxt)

                       # Carton

                        if cls == 3:
                            # Dibujar un rectángulo alrededor del objeto detectado
                            cv2.rectangle(frame_show, (x1, y1), (x2, y2), (150, 150, 150), 2)

                            # Texto para mostrar la clase y la confianza
                            text = f'{clsName[cls]} {conf}%'
                            sizetext = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX, 1, 2)
                            dim = sizetext[0]
                            baseline = sizetext[1]

                            # Dibujar un rectángulo negro detrás del texto para que sea visible
                            cv2.rectangle(frame_show, (x1, y1 - dim[1] - baseline), (x1 + dim[0], y1), (0, 0, 0), cv2.FILLED)
                            # Dibujar el texto de la clase y la confianza
                            cv2.putText(frame_show, text, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 1, (150, 150, 150), 2)

                            images(img_carton, img_cartontxt)

                        # medical

                        if cls == 4:
                            # Dibujar un rectángulo alrededor del objeto detectado
                            cv2.rectangle(frame_show, (x1, y1), (x2, y2), (255, 0, 0), 2)

                            # Texto para mostrar la clase y la confianza
                            text = f'{clsName[cls]} {conf}%'
                            sizetext = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX, 1, 2)
                            dim = sizetext[0]
                            baseline = sizetext[1]

                            # Dibujar un rectángulo negro detrás del texto para que sea visible
                            cv2.rectangle(frame_show, (x1, y1 - dim[1] - baseline), (x1 + dim[0], y1), (0, 0, 0),
                                          cv2.FILLED)
                            # Dibujar el texto de la clase y la confianza
                            cv2.putText(frame_show, text, (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2)

                            images(img_medical, img_medicaltxt)


            # Redimensionar el frame
            frame_show = imutils.resize(frame_show, width=640)

            # Convertir el formato de color de BGR a RGB para usarlo con PIL
            im = Image.fromarray(frame_show)
            img = ImageTk.PhotoImage(im)

            # Mostrar la imagen en el label
            lblVideo.configure(image=img)
            lblVideo.image = img

            # Ejecutar el método scanning de nuevo después de 10 milisegundos
            lblVideo.after(10, scanning)
        else:
            print("Error: No se pudo capturar el frame.")
            cap.release()  # Liberar la cámara si hay un error en la captura
    else:
        print("Error: Cámara no disponible.")
        cap.release()

# Función principal
# Configura la ventana principal de la interfaz gráfica de usuario (GUI),
# inicializa el modelo YOLO y la cámara, y carga las imágenes y otros elementos visuales necesarios.
def ventana_principal():
    global img_metal, img_glass, img_plastic, img_carton, img_medical
    global img_metaltxt, img_glasstxt, img_plastictxt, img_cartontxt, img_medicaltxt, pantalla
    global cap, lblVideo, model, clsName  # Hacer estas variables globales para su uso en scanning

    # Ventana principal
    pantalla = Tk()
    pantalla.title("Reciclaje Inteligente")
    pantalla.geometry("1288x728")

    # Cargar la imagen de fondo usando PIL
    try:
        imagen = Image.open("setUp/Canva.png")
        imagenF = ImageTk.PhotoImage(imagen)
    except Exception as e:
        print(f"Error al cargar la imagen de fondo: {e}")
        return

    # Crear un Label con la imagen de fondo
    background = Label(pantalla, image=imagenF)
    background.imagenF = imagenF  # Mantener referencia de la imagen
    background.place(x=0, y=0, relwidth=1, relheight=1)

    # Modelo YOLO
    model = YOLO('Modelos/best.pt')

    # Clases
    clsName = ['Metal', 'Vidrio', 'Plastico', 'Carton', 'Medical']

    # Cargar imágenes de materiales reciclables
    def cargar_imagen(path):
        img = cv2.imread(path)
        if img is None:
            print(f"Error: No se pudo cargar la imagen {path}")
        return img

    img_metal = cargar_imagen("setUp/metal.png")
    img_glass = cargar_imagen("setUp/vidrio.png")
    img_plastic = cargar_imagen("setUp/plastico.png")
    img_carton = cargar_imagen("setUp/carton.png")
    img_medical = cargar_imagen("setUp/medical.png")
    img_metaltxt = cargar_imagen("setUp/metaltxt.png")
    img_glasstxt = cargar_imagen("setUp/vidriotxt.png")
    img_plastictxt = cargar_imagen("setUp/plasticotxt.png")
    img_cartontxt = cargar_imagen("setUp/cartontxt.png")
    img_medicaltxt = cargar_imagen("setUp/medicaltxt.png")

    # Crear un label para mostrar el video de la cámara
    lblVideo = Label(pantalla)
    lblVideo.place(x=319, y=118)

    # Iniciar captura de video
    cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
    if not cap.isOpened():
        print("Error: No se pudo abrir la cámara.")
        return

    # Configurar el tamaño del video
    cap.set(3, 640)
    cap.set(4, 488)

    # Iniciar el escaneo de video
    scanning()

    # Manejar el cierre de la ventana para liberar la cámara
    def on_closing():
        cap.release()  # Liberar la cámara cuando se cierra la ventana
        pantalla.destroy()  # Cerrar la ventana

    pantalla.protocol("WM_DELETE_WINDOW", on_closing)  # Llamar on_closing cuando se cierra

    # Ejecutar el bucle principal de la ventana
    pantalla.mainloop()

# Ejecución del programa
if __name__ == '__main__':
    ventana_principal()
